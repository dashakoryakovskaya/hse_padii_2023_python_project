import sqlite3
import threading

import config
import telebot
import db
from telebot import types
from pathlib import Path

from datetime import datetime
import time

bot = telebot.TeleBot(config.token)

tconv = lambda x: time.strftime("%Y-%m-%d", time.localtime(x))


def list_of_tuples_to_str(list_tup: list):
    string = ''
    for row in list_tup:
        string += ' '.join(map(str, row)) + '\n'
    return string


def one_tuple_to_str(tup: tuple):
    return str(tup[0][0])


# –º–µ–Ω—é –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def menu_key():
    key = types.InlineKeyboardMarkup()
    but_1 = types.InlineKeyboardButton(text="üìâ –†–∞—Å—Ö–æ–¥—ã", callback_data="ex")
    but_2 = types.InlineKeyboardButton(text="üìà –î–æ—Ö–æ–¥—ã", callback_data="in")
    but_3 = types.InlineKeyboardButton(text="üìÉ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="data")
    but_4 = types.InlineKeyboardButton(text="‚úîÔ∏è –î–∏—Å–∫–æ–Ω—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã", callback_data="cards")
    key.add(but_1, but_2, but_3, but_4)
    return key


def category_key(user_id, ex_in, callback):
    key = types.InlineKeyboardMarkup()
    cat_dict = db.get_categories(ex_in=ex_in)
    for key_d in cat_dict.keys():
        key.add(types.InlineKeyboardButton(text=key_d, callback_data=callback + str(cat_dict[key_d])))
    key.add(types.InlineKeyboardButton(text="üìå –ú–µ–Ω—é", callback_data="menu"))
    return key


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç ‚úåÔ∏è –Ø - –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–≤–æ–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤!", reply_markup=menu_key())
    db.add_user(user_id=message.from_user.id, name=message.from_user.first_name)
    # bot.send_message(message.chat.id, str(threading.current_thread().ident))


# TODO: –Ω—É–∂–Ω–∞ /stop –∫–æ–º–∞–Ω–¥–∞?
@bot.message_handler(commands=['stop'])
def stop(message):
    bot.send_message(message.chat.id, "–î–æ –≤—Å—Ç—Ä–µ—á–∏!")
    bot.stop_polling()


def add_expenses_or_incomes_menu(message, user_id, type, ex_in):
    if message.text.isdigit() and int(message.text) >= 0:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞")
        markup.add(btn1)
        mesg = bot.send_message(message.chat.id, "üóìÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É:",
                                reply_markup=markup)
        bot.register_next_step_handler(mesg, lambda m: add_date(message=m, user_id=user_id, type=type,
                                                                sum=int(message.text), ex_in=ex_in))
    else:
        mesg = bot.send_message(message.chat.id, "üò• –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã\n–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(mesg,
                                       lambda m: add_expenses_or_incomes_menu(message=m, user_id=user_id,
                                                                              type=type, ex_in=ex_in))

    # TODO: –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–ª–∏–Ω—É –º–µ—Å—è—Ü–∞ (–∞–ø—Ä–µ–ª—å - 30 –∏ —Ç–¥)


def is_incorrect_date_format(string):
    return len(string) != 10 or string[4] != "-" or string[7] != "-" or not string[0:4].isdigit() \
        or not string[5:7].isdigit() or not string[8:10].isdigit() \
        or (12 < int(string[5:7]) or int(string[5:7]) < 1) \
        or (31 < int(string[8:10]) or int(string[8:10]) < 1)


def add_date(message, user_id, type, sum, ex_in):
    if message.text == "–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞":
        # datetime.utcfromtimestamp(message.date).strftime('%Y-%m-%d')
        db.add_money_transfer(user_id=user_id, sum=sum, type=type,
                              date=tconv(message.date), ex_in=ex_in)
        bot.send_message(message.chat.id, text="–ó–∞–ø–∏—Å–∞–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())
        bot.send_message(message.chat.id, text="üìå –ú–µ–Ω—é", reply_markup=menu_key())
        return
    if is_incorrect_date_format(message.text):
        mesg = bot.send_message(message.chat.id, "üò• –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD\n–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(mesg, lambda m: add_date(message=m, user_id=user_id, type=type,
                                                                sum=sum, ex_in=ex_in))
    else:
        db.add_money_transfer(user_id=user_id, sum=sum, type=type, date=message.text, ex_in=ex_in)
        bot.send_message(message.chat.id, text="–ó–∞–ø–∏—Å–∞–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())
        bot.send_message(message.chat.id, text="üìå –ú–µ–Ω—é", reply_markup=menu_key())


def get_data_period(message, user_id, type, ex_in, sum_all):
    if message.text == "–í–µ—Å—å –ø–µ—Ä–∏–æ–¥":
        sum = db.get_sum(user_id=user_id, type=type, ex_in=ex_in, all_period=True)
        bot.send_message(message.chat.id, text="–°—É–º–º–∞:\n" + str(sum), reply_markup=types.ReplyKeyboardRemove())
        if sum_all == "all":
            bot.send_message(message.chat.id,
                             text=f'<pre>{db.get_all_statistic(user_id=user_id, type=type, ex_in=ex_in, all_period=True).get_string()}</pre>',
                             parse_mode="HTML")
        bot.send_message(message.chat.id, text="üìå –ú–µ–Ω—é", reply_markup=menu_key())
        return
    if len(message.text) != 21 or is_incorrect_date_format(message.text[:10]) or is_incorrect_date_format(
            message.text[11:]) or message.text[10] != " " or message.text[:10] > message.text[11:]:
        mesg = bot.send_message(message.chat.id, "üò• –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 'YYYY-MM-DD YYYY-MM-DD'\n–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(mesg,
                                       lambda m: get_data_period(message=m, user_id=user_id, type=type, ex_in=ex_in))
    else:
        data_start = message.text[:10]
        data_end = message.text[11:]
        sum = db.get_sum(user_id=user_id, type=type, ex_in=ex_in, all_period=False, data_start=data_start,
                         data_end=data_end)
        bot.send_message(message.chat.id, text="–°—É–º–º–∞:\n" + str(sum), reply_markup=types.ReplyKeyboardRemove())
        if sum_all == "all":
            bot.send_message(message.chat.id,
                             text=f'<pre>{db.get_all_statistic(user_id=user_id, type=type, ex_in=ex_in, data_start=data_start, data_end=data_end).get_string()}</pre>',
                             parse_mode="HTML")
        bot.send_message(message.chat.id, text="üìå –ú–µ–Ω—é", reply_markup=menu_key())


def get_card_name(message, user_id, name):
    bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
    if message.content_type == 'text':
        mesg = bot.send_message(message.chat.id,
                                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ")
        bot.register_next_step_handler(mesg, lambda m: get_card_name(message=m, user_id=user_id, name=message.text))
    if message.content_type == 'photo':
        Path(f'files/{message.chat.id}/photos').mkdir(parents=True, exist_ok=True)

        file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
        src = f'files/{message.chat.id}/' + file_info.file_path
        downloaded_file = bot.download_file(file_info.file_path)
        with open(src, 'wb') as f_d:
            f_d.write(downloaded_file)
        with open(src, 'rb') as f:
            binary = sqlite3.Binary(f.read())

        db.add_card(user_id=user_id, name=name, card=binary)
        bot.send_message(message.chat.id, text="üìå –ú–µ–Ω—é", reply_markup=menu_key())


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.message:
        if call.data == "menu":
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üìå –ú–µ–Ω—é",
                                  reply_markup=menu_key())
        if call.data == "ex" or call.data == "in":
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="üìé –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                                  reply_markup=category_key(user_id=call.from_user.id, ex_in=call.data,
                                                            callback=call.data + "_"))

        if call.data[:len("ex_")] == "ex_" or call.data[:len("in_")] == "in_":
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
            bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")
            mesg = bot.send_message(call.message.chat.id, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")

            bot.register_next_step_handler(mesg,
                                           lambda m: add_expenses_or_incomes_menu(message=m, user_id=call.from_user.id,
                                                                                  type=call.data[len("ex_"):],
                                                                                  ex_in=call.data[:2]))

        if call.data == "data":
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
            # TODO: –ü—Ä–æ–¥—É–º–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ (–ø–µ—Ä–∏–æ–¥, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–¥)
            key = types.InlineKeyboardMarkup()
            but_1 = types.InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="data_balance")
            but_2 = types.InlineKeyboardButton(text="üìâ –†–∞—Å—Ö–æ–¥—ã", callback_data="data_ex")
            but_3 = types.InlineKeyboardButton(text="üìà –î–æ—Ö–æ–¥—ã", callback_data="data_in")
            but_4 = types.InlineKeyboardButton(text="üìå –ú–µ–Ω—é", callback_data="menu")
            key.add(but_1, but_2, but_3, but_4)
            # bot.send_message(chat_id=call.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=key)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="üìé –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=key)

        # data_ex_numcat_all
        if call.data == "data_balance":
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
            bot.send_message(call.message.chat.id, '–ë–∞–ª–∞–Ω—Å:' + '\n' + one_tuple_to_str(
                db.sql_execute(sql=f"SELECT total FROM balance WHERE user_id={call.from_user.id};")))
            bot.send_message(call.message.chat.id, text="üìå –ú–µ–Ω—é", reply_markup=menu_key())

        if call.data == "data_ex" or call.data == "data_in":
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="üìé –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                                  reply_markup=category_key(user_id=call.from_user.id, ex_in=call.data[5:],
                                                            callback=call.data + "_").add(
                                      types.InlineKeyboardButton(text="üìé –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                                                                 callback_data=call.data + "_all")))

        if call.data.count("_") == 2 and (
                call.data[:len("data_ex_")] == "data_ex_" or call.data[:len("data_in_")] == "data_in_"):
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
            key = types.InlineKeyboardMarkup()
            but_1 = types.InlineKeyboardButton(text="üí∞ –°—É–º–º–∞", callback_data=call.data + "_sum")
            but_2 = types.InlineKeyboardButton(text="üìÉ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data=call.data + "_all")
            but_3 = types.InlineKeyboardButton(text="üìå –ú–µ–Ω—é", callback_data="menu")
            key.add(but_1, but_2, but_3)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
                                  reply_markup=key)

        if call.data.count("_") == 3 and (
                call.data[:len("data_ex_")] == "data_ex_" or call.data[:len("data_in_")] == "data_in_") and (
                call.data[-4:] == "_sum" or call.data[-4:] == "_all"):
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
            bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥")
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("–í–µ—Å—å –ø–µ—Ä–∏–æ–¥")
            markup.add(btn1)
            mesg = bot.send_message(call.message.chat.id,
                                    "üóìÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD YYYY-MM-DD' –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥:",
                                    reply_markup=markup)
            bot.register_next_step_handler(mesg,
                                           lambda m: get_data_period(message=m, user_id=call.from_user.id,
                                                                     type=-1 if call.data[
                                                                                len("data_ex_"):call.data.rfind(
                                                                                    "_")] == "all" else call.data[
                                                                                                        len("data_ex_"):call.data.rfind(
                                                                                                            "_")],
                                                                     ex_in=call.data[5:7], sum_all=call.data[-3:]))

        if call.data == "cards":
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
            key = types.InlineKeyboardMarkup()
            but_1 = types.InlineKeyboardButton(text="üìÉ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="cards_get")
            but_2 = types.InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="cards_add")
            but_3 = types.InlineKeyboardButton(text="üìå –ú–µ–Ω—é", callback_data="menu")
            key.add(but_1, but_2, but_3)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="üìé –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                  reply_markup=key)

        if call.data == "cards_add":
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
            mesg = bot.send_message(call.message.chat.id, "‚úîÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
            bot.register_next_step_handler(mesg, lambda m: get_card_name(message=m, user_id=call.from_user.id, name=""))

        if call.data == "cards_get":
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
            key = types.InlineKeyboardMarkup()
            for line in db.get_cards(user_id=call.from_user.id):
                key.add(types.InlineKeyboardButton(text=line[0], callback_data="cards_get_" + line[0]))
            key.add(types.InlineKeyboardButton(text="üìå –ú–µ–Ω—é", callback_data="menu"))
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="‚úîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:",
                                  reply_markup=key)

        if len(call.data) >= len("cards_get_") and call.data[:len("cards_get_")] == "cards_get_":
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
            for line in db.get_cards(user_id=call.from_user.id):
                if line[0] == call.data[len("cards_get_"):]:
                    bot.send_photo(chat_id=call.message.chat.id, photo=line[1])
                    # with open("files/image.jpg", "wb") as f:
                    #     f.write(line[1])
                    #     bot.send_photo(chat_id=call.message.chat.id, photo=open("files/image.jpg", "rb"))
                    break
            bot.send_message(call.message.chat.id, text="üìå –ú–µ–Ω—é", reply_markup=menu_key())


@bot.message_handler(content_types=["text"])
def messages(message):
    # bot.send_message(message.chat.id, str(threading.current_thread().ident))
    '''if message.text[0] == '+':
        db.add_incomes(user_id=message.from_user.id, name=message.from_user.username, date=message.date,
                       sum=int(message.text[1:]), type='')
    if message.text[0] == '-':
        db.add_expenses(user_id=message.from_user.id, name=message.from_user.username, date=message.date,
                        sum=int(message.text[1:]), type='') '''
    # –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏–º—è—Ç–∞–±–ª–∏—Ü—ã_data
    if message.text[-4:] == 'data':
        bot.send_message(message.chat.id, message.text + ':\n' + list_of_tuples_to_str(db.sql_execute(sql="SELECT * "
                                                                                                          "FROM " +
                                                                                                          message.text[
                                                                                                          :-5])))
    if message.text == 'check balance':
        bot.send_message(message.chat.id, '–ë–∞–ª–∞–Ω—Å:' + '\n' + one_tuple_to_str(
            db.sql_execute(sql=f"SELECT total FROM balance WHERE user_id={message.from_user.id};")))


def main():
    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ —Ç–¥
    bot.polling()


if __name__ == '__main__':
    # TODO: –Ω—É–∂–µ–Ω –ª–∏ —Ç—É—Ç flag_drop=True ?
    db.init_db(flag_drop=True)
    main()
